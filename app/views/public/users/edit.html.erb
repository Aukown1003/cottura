<%= render "layouts/error_messages", resource: @user %>
<div class="container my-5">
  <div class="row mb-3">
    <div class="col-8 mx-auto">
      <%= form_with model: @user, url: user_path(@user.id), method: :patch do |f| %>
        <h2 class="d-inline-block p-1 rounded-2 text-bg-secondary">プロフィール編集画面</h2>
        
        <div class="my-3">
          <%= f.label :image, "プロフィール画像", { class: "form-label"} %>
          <div class="d-flex align-items-center">
            <div class="preview">
              <div id="preview_user">
                <% unless @user.image.attached? %>
                  <%= image_tag 'no_image_user.png', class: "img-fluid user_profile_image new-user-img" %>
                <% else %>
                  <%= image_tag @user.get_user_image(100, 100), alt: "ユーザー画像", class:"user_profile_image"%>
                <% end %>
              </div>
            </div>

            <div class="ml-5">
              <%= f.label :image, class: "d-flex align-items-center btn btn-sm btn-secondary" do %>
                <i class="fas fa-camera fa-2x "></i><span class="ps-2 pt-1">写真を変更</span>
                <%= f.file_field :image, accept: "image/*", class: "input-image" %>
              <% end %>
            </div>
          </div>
        </div>
        
        <div class="mb-3 mt-3">
          <%= f.label :name, "ニックネーム", { class: "form-label required"} %>
          <div class="input-group">
            <span class="input-group-text"><i class="fas fa-user"></i></span>
            <%= f.text_field :name, { class: "form-control", autofocus: true, placeholder: "cottura!" } %>
          </div>
        </div>
        
        <div class="mb-3 h-auto">
          <%= f.label :content, "自己紹介", { class: "form-label required"} %>
          <div class="input-group">
            <span class="input-group-text"><i class="fas fa-id-badge"></i></span>
            <%= f.text_area :content, { class: "form-control textarea", placeholder: "簡単な自己紹介を入力", rows: 1 } %>
          </div>
        </div>
        
        <div class="d-flex text-center justify-content-between">
          <div class="actions"> 
            <%= f.submit "プロフィール更新", class: "btn btn-lg btn-success" %>
          </div>
          
          <div class="actions">
            <%= link_to "戻る", :back, class: "btn btn-lg btn-primary" %>
          </div>
        </div>
        
      <% end %>
    </div>
  </div>
</div>

<%= javascript_pack_tag 'public/user_edit' %>
<%= javascript_pack_tag 'public/text_field' %>
<%= javascript_pack_tag 'public/url_changer' %>

<script>

  // window.onload = addToNewUrl();
  // function addToNewUrl() {
  //   let path = location.pathname;
  //   let pattern = /^.*\/edit.*$/
  
  //   if(path.match(pattern)) return;
  //   history.replaceState('', '', `${ path }/edit`)
  // }

  // document.addEventListener('turbolinks:load', function () {
  //   new textFieldHeight();
  //   new imagePreview();
  // })
  
  // // テキストエリアの高さの自動調整
  // class textFieldHeight {
  //   constructor() {
  //     this.textareaEls = document.querySelectorAll("textarea");
  //     this.textHeight();
  //   }
  //   textHeight() {
  //     this.textareaEls.forEach(function(textareaEl) {
  //       textareaEl.setAttribute("style", `height: ${textareaEl.scrollHeight}px;`);
  //       textareaEl.addEventListener("input",function() {
  //         this.style.height = "auto";
  //         this.style.height = `${this.scrollHeight}px`;
  //       });
  //     });
  //   }
  // }

  // // レシピ画像のプレビュー
  // class imagePreview {
  //   constructor() {
  //     this.previewElement = document.getElementById('preview_user');
  //     this.userImageElement = document.getElementById('user_image');
  //     this.bindEvent();
  //   }
    
  //   bindEvent() {
  //     if (this.userImageElement) {
  //       this.userImageElement.addEventListener('change', this.handleChange.bind(this));
  //     }
  //   }
    
  //   handleChange(e) {
  //     const file = e.target.files[0];
  //     if (file.name.endsWith(".webp")) {
  //       alert("webp形式の画像は選択できません");
  //       e.target.value = "";
  //       return;
  //     }
  //     this.removeImageContent();
  //     this.createImageHTML(window.URL.createObjectURL(file));
  //   }
    
  //   removeImageContent() {
  //     const imageContent = document.querySelector(".new-user-img");
  //     if (imageContent) {
  //       imageContent.remove();
  //     }
  //   }
    
  //   createImageHTML(blob) {
  //     const blobImage = document.createElement('img');
  //     blobImage.setAttribute('class', 'new-user-img img-fluid user_profile_image');
  //     blobImage.setAttribute('src', blob);
  //     this.previewElement.appendChild(blobImage);
  //   }
  // }

  // window.addEventListener('turbolinks:load', () => {
  //   const textareaEls = document.querySelectorAll("textarea");
  //   textareaEls.forEach((textareaEl) => {
  //     textareaEl.setAttribute("style", `height: ${textareaEl.scrollHeight}px;`);
  //     textareaEl.addEventListener("input", setTextareaHeight);
  //   });
  //   function setTextareaHeight() {
  //     this.style.height = "auto";
  //     this.style.height = `${this.scrollHeight}px`;
  //   }
  // });

  // document.addEventListener('turbolinks:load', () => {
  //   const createImageHTML = (blob) => {
  //     const imageElement = document.getElementById('preview_user');
  //     const blobImage = document.createElement('img');
  //     blobImage.setAttribute('class', 'new-user-img img-fluid user_profile_image');
  //     blobImage.setAttribute('src', blob);

  //     imageElement.appendChild(blobImage);
  //   };
  //   // id = recipe_imageを取得(ファイルを選択時のボタン)、クリック時に以下の処理を実行
  //   if (document.getElementById('user_image') != null ){
  //       document.getElementById('user_image').addEventListener('change', (e) => {
  //       const imageContent = document.querySelector(".user_profile_image");
  //       // getelemntByClassname
  //       // imageContentに値が入っている場合remove
  //       if (imageContent){
  //         imageContent.remove();
  //       }

  //       const file = e.target.files[0];
  //       const blob = window.URL.createObjectURL(file);
  //       createImageHTML(blob);
  //       });
  //   }
  // });
</script>