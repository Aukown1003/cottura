<%= render "layouts/error_messages", resource: resource %>
<div class="container-fluid px-4">
  <div class="row">
    <div class="image-container col-md-6 mx-auto">
      <%= image_tag 'sign_up_image.jpg', class:"sign_up_image img-fluid" %>
      <p class="sing_up_text">Create your account!</p>
    </div>
    
    <div class="col-md-6 mt-3  mx-auto">
      <%= form_with model: @user, url: user_registration_path do |f| %>
        <h2 class="border-bottom border-2">新規会員登録</h2>
        
        <div class="my-3">
          <%= f.label :image, "プロフィール画像", { class: "form-label"} %>
          <div class="d-flex align-items-center">
            <div class="preview">
              <div id="preview_user">
                <%= image_tag 'no_image_user.png', class: "img-fluid user_profile_image new-user-img" %>
              </div>
            </div>
            <div class="ml-5">
              <%= f.label :image, class: "d-flex align-items-center btn btn-sm btn-secondary" do %>
                <i class="fas fa-camera fa-2x "></i><span class="ps-2 pt-1">写真を追加</span>
                <%= f.file_field :image, accept: "image/*", class: "input-image" %>
              <% end %>
            </div>
          </div>
        </div>
        
        <div class="mb-3">
          <%= f.label :name, "ニックネーム", { class: "form-label required"} %>
          <div class="input-group">
            <span class="input-group-text"><i class="fas fa-user"></i></span>
            <%= f.text_field :name, { class: "form-control", autofocus: true, placeholder: "cottura!" } %>
          </div>
        </div>
        
        <div class="mb-3">
          <%= f.label :email, "メールアドレス", { class: "form-label required"} %>
          <div class="input-group">
            <span class="input-group-text"><i class="fas fa-envelope"></i></span>
            <%= f.email_field :email, { class: "form-control", autocomplete: "email", placeholder: "cottura@example.com" } %>
          </div>
        </div>
        
        <div class="mb-3">
          <%= f.label :content, "自己紹介", { class: "form-label required"} %>
          <div class="input-group">
            <span class="input-group-text"><i class="fas fa-id-badge"></i></span>
            <%= f.text_area :content, { class: "form-control", placeholder: "簡単な自己紹介を入力", rows: 1} %>
          </div>
        </div>
          
        <div class="mb-3">
          <%= f.label :password, "パスワード(6文字以上)", { class: "form-label required"} %>
          <div class="input-group">
            <span class="input-group-text"><i class="fas fa-lock"></i></span>
            <%= f.password_field :password, { class: "form-control", autocomplete: "new-password", placeholder: "password" } %>
          </div>
        </div>
        
        <div class="mb-3">
          <%= f.label :password_confirmation, "パスワード(確認用)", { class: "form-label required"} %>
          <div class="input-group">
            <span class="input-group-text"><i class="fas fa-lock"></i></span>
            <%= f.password_field :password_confirmation, { class: "form-control", autocomplete: "new-password", placeholder: "password_confirmation" } %>
          </div>
        </div>
        
        <div class="mt-3">
          <%= f.submit "新規登録", class: "btn btn-lg btn-success w-100" %>
        </div>
      <% end %>
      <p class="text-center my-1">もしくは</p>
      <div>
        <%= link_to "ゲストログイン",  user_guest_sign_in_path, method: :post, class:"gest-btn btn btn-lg btn-warning w-100" %><br>
      </div>
    </div>
  </div>
</div>

<script>
  window.onload = addToNewUrl();
    function addToNewUrl() {
    let path = location.pathname;
    let pattern = /^.*\/sign_up.*$/
  
    if(path.match(pattern)) return;
    history.replaceState('', '', `${ path }/sign_up`)
  }

// テキストエリアの可変処理
  window.addEventListener('turbolinks:load', () => {
    // textareaタグを全て取得
    const textareaEls = document.querySelectorAll("textarea");
  
    textareaEls.forEach((textareaEl) => {
      // デフォルト値としてスタイル属性を付与
      textareaEl.setAttribute("style", `height: ${textareaEl.scrollHeight}px;`);
      // inputイベントが発生するたびに関数呼び出し
      textareaEl.addEventListener("input", setTextareaHeight);
    });
  
    // textareaの高さを計算して指定する関数
    function setTextareaHeight() {
      this.style.height = "auto";
      this.style.height = `${this.scrollHeight}px`;
    }
  });




  document.addEventListener('turbolinks:load', () => {
    const createImageHTML = (blob) => {
      const imageElement = document.getElementById('preview_user');
      const blobImage = document.createElement('img');
      // class属性の追加
      blobImage.setAttribute('class', 'new-user-img img-fluid user_profile_image');
      blobImage.setAttribute('src', blob);

      imageElement.appendChild(blobImage);
    };
     // id = recipe_imageを取得(ファイルを選択時のボタン)、クリック時に以下の処理を実行
     if (document.getElementById('user_image') != null ){
        document.getElementById('user_image').addEventListener('change', (e) => {
        const imageContent = document.querySelector(".new-user-img");
        // getelemntByClassname
        // imageContentに値が入っている場合remove
        if (imageContent){
          imageContent.remove();
        }

        const file = e.target.files[0];
        const blob = window.URL.createObjectURL(file);
        createImageHTML(blob);
        });
     }
  });
</script>