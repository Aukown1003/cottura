<%= form_with(model: @recipe, local: true) do |f| %>
  <div>タイトル</div>
  <div>
    <%= f.text_field :title, placeholder: "レシピ名", class:""%>
  </div>

  <div>レシピ紹介</div>
  <div>
    <%= f.text_area :content, placeholder: "説明", class:""%>
  </div>

  <div>調理時間</div>
  <div>
    <%= f.number_field :total_time,min: 0, value: 0, step: 15, include_seconds: false, class:""%>
    <!--< %= f.select :total_time, [-->
    <!--    ["15分", 15],-->
    <!--    ["30分", 30],-->
    <!--    ["45分", 45],-->
    <!--    ["1時間", 60],-->
    <!--    ["1時間15分", 75],-->
    <!--    ["1時間30分", 90],-->
    <!--    ["1時間45分", 105],-->
    <!--    ["2時間", 120],-->
    <!--    ["2時間15分", 135],-->
    <!--    ["2時間30分", 150],-->
    <!--    ["2時間45分", 165],-->
    <!--    ["3時間", 180],-->
    <!--  ],include_blank: "選択して下さい" %>-->
  </div>


  <div>材料</div>
  <div class="recipe_ingredient">
    <%= f.fields_for :recipe_ingredients do |ingredient| %>
      <%= render "recipe_ingredient_fields", f: ingredient %>
    <% end %>
    <%= link_to_add_fields "材料の追加", f, :recipe_ingredients %>
  </div>

  <div>作り方</div>
  <div class="recipe_step">
    <%= f.fields_for :recipe_steps do |step| %>
      <%= render "recipe_step_fields", f: step %>
    <% end %>
    <%= link_to_add_fields "作り方の追加", f, :recipe_steps %>
  </div>

  <%= f.submit "レシピを投稿する" %>
<% end %>

<script>
// 項目追加
class addFields {
  constructor() {
    this.links = document.querySelectorAll('.add_fields')
    this.iterateLinks()
  }

  iterateLinks() {
    if (this.links.length === 0) return
    this.links.forEach(link => {
      link.addEventListener('click', e => {
        this.handleClick(link, e)
      })
    })
  }

  handleClick(link, e) {
    if (!link || !e) return
    e.preventDefault()
    let time = new Date().getTime()
    let linkId = link.dataset.id
    let regexp = linkId ? new RegExp(linkId, 'g') : null
    let newFields = regexp ? link.dataset.fields.replace(regexp, time) : null
    newFields ? link.insertAdjacentHTML('beforebegin', newFields) : null
  }
}

window.addEventListener('turbolinks:load', () => new addFields())

// 項目削除
class removeFields {
  constructor() {
    this.iterateLinks()
  }

  iterateLinks() {
    document.addEventListener('click', e => {
      if (e.target && e.target.className == 'remove_fields') {
        this.handleClick(e.target, e)
      }
    })
  }

  handleClick(link, e) {
    if (!link || !e) return
    e.preventDefault()
    let fieldParent = link.closest('.nested-fields')
    let deleteField = fieldParent
      ? fieldParent.querySelector('input[type="hidden"]')
      : null
    if (deleteField) {
      deleteField.value = 1
      fieldParent.style.display = 'none'
    }
  }
}

window.addEventListener('turbolinks:load', () => new removeFields())
</script>
