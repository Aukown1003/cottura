<%= form_with(model: @recipe, local: true) do |f| %>
  <div class="row">
    <div class="col-12 text-center mb-5">
      <%= f.text_field :title, placeholder: "レシピ名(32文字以内)", class:"recipe-name"%>
    </div>

    <div class="col-md-6 text-center my-auto">
      <!--クラス名、id変更禁止(javascript使用)-->
      <div class="preview">
        <div id="preview">
          <img src="/assets/no_image_item" alt="default-image" class="img-fluid default-image">
        </div>
      </div>

      <label class="mt-3 mb-3 mb-md-3">
        <%= f.label :image, class: "d-block align-middle btn btn-primary" do %>
          <i class="fas fa-camera fa-2x "></i>
          <span class="">写真を追加</span>
        <!--クラス名変更禁止(css使用)-->
          <%= f.file_field :image, accept: "image/*", class: "input-image" %>
        <% end %>
      </label>

    </div>

    <div class="col-md-6">
      <div class="mb-3">
        <h5 class="font-weight-bold">レシピ紹介</h5>
        <%= f.text_area :content, placeholder: "簡単な概要を記述(140文字以内)", class:"w-100 recipe-content textArea", rows: 1%>
      </div>
      
      <div class="selectdiv mb-3">
        <h5 class="font-weight-bold">調理時間</h5>
        <%= f.select :total_time, Recipe.select_time_data ,include_blank: "選択して下さい" %>
      </div>


      <h5 class="font-weight-bold">材料</h5>
      <div class="recipe_ingredient text-center">
        <%= f.fields_for :recipe_ingredients do |ingredient| %>
          <%= render "recipe_ingredient_fields", f: ingredient %>
        <% end %>
        <%= link_to_add_fields "材料の追加", f, :recipe_ingredients %>
      </div>
    </div>
    
    <div class="col-12 text-center">
      <h5 class="font-weight-bold">作り方</h5>
      <div class="recipe_step">
        <%= f.fields_for :recipe_steps do |step| %>
          <%= render "recipe_step_fields", f: step %>
        <% end %>
        <%= link_to_add_fields "作り方の追加", f, :recipe_steps %>
      </div>
    </div>
    
    <div class="col-12 mt-3 text-center">
      <%= f.submit "レシピを投稿する", class:"btn btn-primary" %>
    </div>
    
  </div>
<% end %>
<script>

// テキストエリアの可変処理
window.addEventListener('turbolinks:load', () => {
  // textareaタグを全て取得
  const textareaEls = document.querySelectorAll("textarea");

  textareaEls.forEach((textareaEl) => {
    // デフォルト値としてスタイル属性を付与
    textareaEl.setAttribute("style", `height: ${textareaEl.scrollHeight}px;`);
    // inputイベントが発生するたびに関数呼び出し
    textareaEl.addEventListener("input", setTextareaHeight);
  });

  // textareaの高さを計算して指定する関数
  function setTextareaHeight() {
    this.style.height = "auto";
    this.style.height = `${this.scrollHeight}px`;
  }
});


// 項目追加
class addFields {
  constructor() {
    this.links = document.querySelectorAll('.add_fields')
    this.iterateLinks()
  }

  iterateLinks() {
    if (this.links.length === 0) return
    this.links.forEach(link => {
      link.addEventListener('click', e => {
        this.handleClick(link, e)
      })
    })
  }

  handleClick(link, e) {
    if (!link || !e) return
    e.preventDefault()
    let time = new Date().getTime()
    let linkId = link.dataset.id
    let regexp = linkId ? new RegExp(linkId, 'g') : null
    let newFields = regexp ? link.dataset.fields.replace(regexp, time) : null
    newFields ? link.insertAdjacentHTML('beforebegin', newFields) : null
  }
}

window.addEventListener('turbolinks:load', () => new addFields())

// 項目削除
class removeFields {
  constructor() {
    this.iterateLinks()
  }

  iterateLinks() {
    document.addEventListener('click', e => {
      if (e.target && e.target.className == 'remove_fields') {
        this.handleClick(e.target, e)
      }
    })
  }

  handleClick(link, e) {
    if (!link || !e) return
    e.preventDefault()
    let fieldParent = link.closest('.nested-fields')
    let deleteField = fieldParent
      ? fieldParent.querySelector('input[type="hidden"]')
      : null
    if (deleteField) {
      deleteField.value = 1
      fieldParent.style.display = 'none'
    }
  }
}

window.addEventListener('turbolinks:load', () => new removeFields())


  // もしurlにnewが含まれていれば実行。後でeditも足す
if (document.URL.match(/new/)){
  document.addEventListener('turbolinks:load', () => {
    const createImageHTML = (blob) => {
      const imageElement = document.getElementById('preview');
      const blobImage = document.createElement('img');
      // class属性の追加
      blobImage.setAttribute('class', 'new-img img-fluid');
      blobImage.setAttribute('src', blob);

      imageElement.appendChild(blobImage);
    };
     // id = recipe_imageを取得(ファイルを選択時のボタン)、クリック時に以下の処理を実行
    document.getElementById('recipe_image').addEventListener('change', (e) => {
      const imageContent = document.querySelector('img');
      // imageContentに値が入っている場合remove
      if (imageContent){
        imageContent.remove();
      }

      const file = e.target.files[0];
      const blob = window.URL.createObjectURL(file);
      createImageHTML(blob);
    });
  });
}
</script>
